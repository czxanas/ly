---
import Cta from '../components/cta.astro';
import Heart from '../components/heart.astro';
import Voice from '../components/voice.astro';
import Layout from '../layouts/Layout.astro';

const seo = {
    // title: 'Astro Boilerplate - Home',
    // description: 'A minimal and powerful Astro boilerplate for fast web development.',
    // social: {
    //     facebook: {
    //         title: 'Astro Boilerplate - Facebook',
    //         description: 'A minimal starter built with Astro. Fast, clean and scalable.',
    //         image: {
    //             url: '/cover-home.jpg' // You can change this path if you have a different image
    //         }
    //     },
    //     twitter: {
    //         creator: '@anas_dev',
    //         title: 'Astro Boilerplate - Twitter',
    //         description: 'Start fast with this clean Astro boilerplate.',
    //         image: {
    //             url: '/cover-home.jpg'
    //         }
    //     }
    // },
    // advanced: {
    //     robots: ['index', 'follow'],
    //     canonical: 'https://yourdomain.com/' // replace with your real domain
    // }
};

const voices = [
    {
        audio: '/audios/together.mp3',
        image: '/images/anas.webp',
        text: 'Together',
        locked: false
    },
    {
        audio: '/audios/love.mp3',
        image: '/images/anas-1.webp',
        text: 'Love you',
        locked: false
    },
    {
        audio: '/audios/life.mp3',
        image: '/images/anas-3.webp',
        text: 'Life',
        locked: false
    },
    {
        audio: '/audios/fcku.mp3',
        image: '/images/anas-4.webp',
        text: 'Locked',
        locked: true
    }
];
---

<Layout title="Home" seo={seo}>
    <section class="container max-w-5xl pb-15">
        <div
            class="h-[0dvh] min-h-135 flex flex-col items-center justify-center gap-5 duration-200 text-center"
        >
            <Heart />
            <h1 class="text-5xl xs:text-7xl leading-[0.95] font-light max-w-150 px-8 duration-150">
                Never miss me
            </h1>
            <p class="max-w-100 text-center text-black/60 text-base xs:text-lg mb-4 px-3">
                Built for my lovely girl, she's that person that means everything
            </p>
            <Cta />
        </div>

        <h2
            class="audios w-full text-center mx-auto px-5 text-2xl xs:text-4xl font-light mt-0 mb-10"
        >
            To the sun & back
        </h2>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 sm:gap-4 duration-150">
            {
                voices.map(({ audio, image, text, locked }) => (
                    <Voice src={audio} image={image} text={text} locked={locked} />
                ))
            }
        </div>
    </section>

    <footer class="mt-16 sm:mt-30 mb-30">
        <div class="container max-w-5xl">
            <div class="h-[0.05rem] w-4/10 bg-black/10 rounded-full mx-auto"></div>
            <p class="text-center text-sm text-black/50 max-w-120 mx-auto px-4 mt-5">
                Designed & built by<br />the luckiest man on Earth.
            </p>
        </div>
    </footer>
</Layout>

<script>
    import gsap from 'gsap';

    document.addEventListener('DOMContentLoaded', () => {
        const boxes = document.querySelectorAll('.voice-box');
        let currentAudio: HTMLAudioElement | null = null;
        let currentBars: any = [];
        let barTimeline: any = null;

        boxes.forEach((box) => {
            const src = box.getAttribute('data-src');
            const bars = box.querySelectorAll<HTMLElement>('.bar');

            box.addEventListener('click', () => {
                if (box.classList.contains('cursor-not-allowed')) return;

                // Stop previous audio & animation
                if (currentAudio) {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                    barTimeline?.kill();
                    currentBars.forEach((bar: any) => gsap.set(bar, { height: '0.25rem' }));
                }

                // Create and play new audio
                const audio = new Audio(src!);
                currentAudio = audio;
                currentBars = bars;

                audio.play();

                // Animate bars with staggered randomness
                barTimeline = gsap.timeline({ repeat: -1 });
                bars.forEach((bar, i) => {
                    const delay = Math.random() * 0.2; // different start for each bar
                    barTimeline.to(
                        bar,
                        {
                            height: `${Math.random() * 1.5 + 0.5}rem`,
                            duration: 0.3,
                            yoyo: true,
                            repeat: 1,
                            ease: 'sine.inOut'
                        },
                        delay
                    );
                });

                // When audio ends
                audio.addEventListener('ended', () => {
                    barTimeline?.kill();
                    bars.forEach((bar) => gsap.set(bar, { height: '0.25rem' }));
                });
            });
        });
    });
</script>

<script>
    function formatTime(seconds: number): string {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        // const milliseconds = Math.floor((seconds % 1) * 1000);
        // return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}:${milliseconds.toString().padStart(3, '0').slice(0, 2)}`;
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }

    function preloadDurations() {
        const boxes = document.querySelectorAll('.voice-box');

        boxes.forEach((box) => {
            const audio = new Audio(box.getAttribute('data-src')!);

            audio.addEventListener('loadedmetadata', () => {
                const duration = audio.duration;
                const durationSpan = box.querySelector<HTMLElement>('.duration');
                if (durationSpan) {
                    durationSpan.textContent = formatTime(duration);
                }
            });
        });
    }

    document.addEventListener('DOMContentLoaded', preloadDurations);
</script>

<script>
    import gsap from 'gsap';
    import ScrollToPlugin from 'gsap/ScrollToPlugin';

    gsap.registerPlugin(ScrollToPlugin);

    document.addEventListener('DOMContentLoaded', () => {
        const trigger = document.querySelector('.lost') as HTMLElement;
        const target = document.querySelector('.audios');

        if (trigger && target) {
            trigger.addEventListener('click', () => {
                // Kill any ongoing scroll animations on the window


                gsap.to(window, {
                    onStart: () => {
                        trigger.style.pointerEvents = 'none';
                    },
                    duration: 0.3,
                    scrollTo: {
                        y: target,
                        offsetY: 50 // optional: offset from top (e.g. for fixed headers)
                    },
                    ease: 'power2.out',
                    onComplete: () => {
                        trigger.style.pointerEvents = 'auto';
                    }
                });
            });
        }
    });
</script>
